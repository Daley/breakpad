{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "66697776_9c1b0f57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-07-28T19:37:30Z",
      "side": 1,
      "message": "Mark, is this commit message clear enough?",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e74898b3_7c903449",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-08-01T09:27:47Z",
      "side": 1,
      "message": "Yuki, you ran into a similar issue 2 months ago.\nhttps://chromium-review.googlesource.com/c/breakpad/breakpad/+/4582790\n\nWhat do you think of the proposed solution?",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d72e42_211872a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-08-01T15:30:34Z",
      "side": 1,
      "message": "this code appears to be very tricky and handling some real world issues.  but there doesn\u0027t appear to be unittest coverage to make sure we don\u0027t break things.  can you please expand that first ?",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bd0c971_04d6b08b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-08-01T15:46:40Z",
      "side": 1,
      "message": "\"Expand that\" \u003d write unit tests?",
      "parentUuid": "71d72e42_211872a6",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b2ece69_e5de8779",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-08-01T17:10:51Z",
      "side": 1,
      "message": "yes, expand the unit tests",
      "parentUuid": "3bd0c971_04d6b08b",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d30a90a8_165d578a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-08-02T16:02:04Z",
      "side": 1,
      "message": "Added Ivan, Peter, Primiano for their role in crbug.com/716484\n\nFirst of all, the bug where debug ID \u003d 000000000000000000\nmentioned at crbug.com/716484#c24 *should* be fixed by\nhttps://chromium-review.googlesource.com/c/breakpad/breakpad/+/4674337\n\nHad a look at crbug.com/716484#c37 from Primiano\nhttps://docs.google.com/presentation/d/1zhdACWvOwRMx3bJ4-3zRy2RzmFNaf-kq8eUVqEIRMVI\n\nHoly viper\u0027s nest, Batman...\nPrimiano, I think my fix makes sense?\nBut I don\u0027t know if it would break some of the Android shenanigans?\n\nAlso, please have a look at\nhttps://chromium-review.googlesource.com/c/breakpad/breakpad/+/4675547\n\nIt\u0027s required for dump_syms to produce the correct offsets.",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d21854ef_90f49911",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-08-02T21:45:57Z",
      "side": 1,
      "message": "I wouldn\u0027t even know where to start...\nWouldn\u0027t chromium devs be in the best position to write unit tests?",
      "parentUuid": "6b2ece69_e5de8779",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f459b4d8_5ad33717",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-08-04T04:12:34Z",
      "side": 1,
      "message": "the person writing new changes would be the best person to expand test coverage since they know what to expect.  it isn\u0027t like breakpad has no unittests and you have to design something yourself from scratch.  although it seems that linux_dumper.cc itself doesn\u0027t have specific coverage.\n\ncopy linux_core_dumper_unittest.cc to linux_dumper_unittest.cc as a helpful starting point.  delete all the existing TEST(...) setups.  add your own TEST().  have it create a tempdir, write some known map files to it, instantiate LinuxDumper, invoke EnumerateMappings, then examine the mappings to make sure they\u0027re correct.\n\nso you\u0027d be responsible for providing some representative map files that breakpad isn\u0027t handling today.",
      "parentUuid": "d21854ef_90f49911",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29f24b01_0480629e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-08-09T13:34:59Z",
      "side": 1,
      "message": "Before I embark on an uncertain \u0026 time-consuming journey, I would need some kind of assurance that my fix will actually be considered for inclusion.\n\nMark M wrote:\n\u003e I\u0027ve considered some, but not all, of the changes in this file. I\u0027m not opposed to further consideration, but you\u0027ll need to provide more explanation (requested in the change description) in order to better understand what module mapping layout you\u0027re hoping for this code to process.\n\n\nI provided that explanation here, yet Mark has not said a word.\n\nI was also hoping for comments from the people involved in the previous \"creative hacks\" for the ELF segments handling code (Ivan P, Peter C, Priminano T). Maybe they already tried my approach and know it will fail for the googlers\u0027 use-case (in which case, it would be pointless to try to upstream my fix).\n\nWe support two platforms (x86 \u0026 arm64) and I\u0027m chasing a regression on x86 at the moment.",
      "parentUuid": "f459b4d8_5ad33717",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dee8b5c7_f3259802",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-08-15T03:20:52Z",
      "side": 1,
      "message": "Mark is a busy dude.  we\u0027re all busy.  breakpad is a \u003c20% side project for me that i do drivebys on from time to time.  i grok these aren\u0027t great answers.\n\nthe fact that there\u0027s multiple code comments \u0026 bugs in here makes it seem like \"just throw all the checks away\" is a bad idea without test coverage \u0026 research.  i agree that they might be workarounds for crap tools, but if those tools are still misbehaving, we prob can\u0027t just ignore them.",
      "parentUuid": "29f24b01_0480629e",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3209c715_9be90b29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-09-04T10:25:35Z",
      "side": 1,
      "message": "I appreciate your honesty.\n\nI\u0027m really frustrated, because it looks like I\u0027m really bad at explaining the issue, and why I think my proposed solution fixes said issue.\n\nThe fact that none of the authors of the previous work-arounds have commented is very disheartening...\n\nIn my understanding, this is not an issue with \"crap tools\".\nIt is an issue with INCORRECT PROGRAMMER ASSUMPTIONS.\n(Which, I suppose we could argue, results in \"crap tools\")\n\n\nIt seems that, at the dawn of humanity, someone incorrectly proclaimed:\n\nALL LINKERS BEFORE HAVE PUT THE EXECUTABLE SEGMENT FIRST,\nTHEREFORE ALL LINKERS TO COME WILL DO THE SAME, FOREVER.\n\nAnd everything was fine. Until it was not.\n\nOne day, one linker put the executable segment SECOND.\nHowever, a programmer noticed that the first and second segment were contiguous (no hole between them) so they said \"Hey, let\u0027s just pretend the two segments are just one big executable segment, and everything will work fine\".\n\nAnd it did. Until it did not.\n\nOne day, another linker put the executable segment second, AND WITH A HOLE between the first and second segment. Thus the previous hack no longer worked.\n\nSomeone said \"Let\u0027s just keep pretending it\u0027s one big happy executable segment, because the code after **really** expects that the start of the executable segment coincides with the load address\".\n\nAnd Joshua said \"this hack is too hackish\".\nAnd Mark said \"why don\u0027t you just use crashpad?\"\nhttps://chromium-review.googlesource.com/c/breakpad/breakpad/+/4582790\n\n\nSpecifically, `mold` uses this layout:\n\n1) RO segment\n2) RX segment (plt, fini, init, text)\n3) RW segment\n4) RW segment\n\nLOAD off    0x0000000000000000 vaddr 0x0000000000200000 align 2**16\n     filesz 0x00000000002d4c58 memsz 0x00000000002d4c58 flags r--\n\nLOAD off    0x00000000002d4c60 vaddr 0x00000000004e4c60 align 2**16\n     filesz 0x00000000006e8a88 memsz 0x00000000006e8a88 flags r-x\n\nLOAD off    0x00000000009bd6e8 vaddr 0x0000000000bdd6e8 align 2**16\n     filesz 0x0000000000003a88 memsz 0x0000000000012918 flags rw-\n\nLOAD off    0x00000000009c1170 vaddr 0x0000000000bf1170 align 2**16\n     filesz 0x000000000000afc8 memsz 0x0000000000029d69 flags rw-\n\nCorresponding mappings in /proc/self/maps:\n\nAddress range      Perm  Offset    Dev    Inode     Path\n00200000-004d5000  r--p  00000000  00:10  31851070  /opt/foo/bar\n004e4000-00bce000  r-xp  002d4000  00:10  31851070  /opt/foo/bar\n00bdd000-00be2000  r--p  009bd000  00:10  31851070  /opt/foo/bar\n00bf1000-00bfd000  rw-p  009c1000  00:10  31851070  /opt/foo/bar\n\n\nThe virtual load address of the executable segment is 4e4c60,\ni.e. 4e4000 when aligned to a 4K page boundary.\n\nIt seems the obvious solution is not to add lies on top of lies.\nThere is ONE executable segment, put THAT in the minidump,\nand let the other tools work with that segment.\n\nHowever, it seems my boss wants to try using the rust rewrite of breakpad,\nso maybe all this is moot :(",
      "parentUuid": "dee8b5c7_f3259802",
      "revId": "a1e16a72778905983970c976004b6ce167532751",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}