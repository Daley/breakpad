{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f9b1fbd_e12bbb00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2022-12-01T03:12:09Z",
      "side": 1,
      "message": "I tested on Windows with Cygwin and found a recent version of g++ can no longer compile src/common/path_helper.cc because it doesn\u0027t know about strdup(). I believe this can be fixed by using -std\u003dgnu++17 for GCC. Are your autoconf skills strong enough to easily make this change?",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0162e346_c2c1691e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-12-01T03:53:40Z",
      "side": 1,
      "message": "i\u0027m not following.  the `AX_CXX_COMPILE_STDCXX(17)` call is supposed to set up the compiler to use the right settings to get C++17 (if it isn\u0027t already the default).  are you saying that isn\u0027t working ?",
      "parentUuid": "6f9b1fbd_e12bbb00",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fd05f64_63ae2d40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2022-12-01T04:32:17Z",
      "side": 1,
      "message": "\u003e \u003e I tested on Windows with Cygwin and found a recent version of g++ can no longer compile src/common/path_helper.cc because it doesn\u0027t know about strdup(). I believe this can be fixed by using -std\u003dgnu++17 for GCC. Are your autoconf skills strong enough to easily make this change?\n\u003e i\u0027m not following.  the `AX_CXX_COMPILE_STDCXX(17)` call is supposed to set up the compiler to use the right settings to get C++17 (if it isn\u0027t already the default).  are you saying that isn\u0027t working ?\n\nLei, did you mean `-std\u003dgnu++17` as opposed to `-std\u003dc++17`? If so, try `AX_CXX_COMPILE_STDCXX(17, ext)` (`ext` in place of `noext`). Although I’d love to know what it is about `strdup` of all things that broke under Cygwin. Can you share the error? Did you hunt down its declaration in Cygwin’s `\u003cstring.h\u003e`?",
      "parentUuid": "0162e346_c2c1691e",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23c71e81_5bcade58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2022-12-01T18:37:21Z",
      "side": 1,
      "message": "Before this CL, g++ ran without `-std\u003d`. Now it\u0027s set to `-std\u003dc++17`, but that doesn\u0027t work with g++ in Cygwin. It does if I switch to `-std\u003dgnu++17`. The `s/noext/ext/` suggestion works for me.\n\nThe error I see is:\n\n```\n$ g++ -std\u003dc++17 -DHAVE_CONFIG_H -I. -I./src  -I./src   -Wmissing-braces -Wnon-virtual-dtor -Woverloaded-virtual -Wreorder -Wsign-compare -Wunused-local-typedefs -Wunused-variable -Wvla -Werror  -g -O2 -MT src/common/path_helper.o -MD -MP -MF $depbase.Tpo -c -o src/common/path_helper.o src/common/path_helper.cc\nsrc/common/path_helper.cc: In function ‘std::string google_breakpad::BaseName(const string\u0026)’:\nsrc/common/path_helper.cc:39:20: error: ‘strdup’ was not declared in this scope; did you mean ‘strcmp’?\n   39 |   char* path_tmp \u003d strdup(path.c_str());\n      |                    ^~~~~~\n      |                    strcmp\nsrc/common/path_helper.cc: In function ‘std::string google_breakpad::DirName(const string\u0026)’:\nsrc/common/path_helper.cc:47:20: error: ‘strdup’ was not declared in this scope; did you mean ‘strcmp’?\n   47 |   char* path_tmp \u003d strdup(path.c_str());\n      |                    ^~~~~~\n      |                    strcmp\n```\n\nIt doesn\u0027t happen with g++ on Linux. /usr/include/string.h is indeed different on these 2 platforms. On Linux, I see:\n\n```\n#if (defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8     \\\n     || __GLIBC_USE (LIB_EXT2) || __GLIBC_USE (ISOC2X))\n/* Duplicate S, returning an identical malloc\u0027d string.  */\nextern char *strdup (const char *__s)\n     __THROW __attribute_malloc__ __nonnull ((1));\n#endif\n```\n\nIn Cygwin:\n\n```\n#if __MISC_VISIBLE || __POSIX_VISIBLE \u003e\u003d 200809 || __XSI_VISIBLE \u003e\u003d 4\nchar    *strdup (const char *) __malloc_like __result_use_check;\n#endif\n```",
      "parentUuid": "2fd05f64_63ae2d40",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "def0f45f_078f5766",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2022-12-01T18:49:24Z",
      "side": 1,
      "message": "\u003e Before this CL, g++ ran without `-std\u003d`. Now it\u0027s set to `-std\u003dc++17`, but that doesn\u0027t work with g++ in Cygwin. It does if I switch to `-std\u003dgnu++17`. The `s/noext/ext/` suggestion works for me.\n\nIt sounds like perhaps your g++ in Cygwin is out of date, since it recognizes `-std\u003dgnu++17` but not `-std\u003dc++17`. (Maybe it understands `-std\u003dc++1z`?) That would be pre-GCC 5, I think, which is quite old at this point (from 2015). What version is it?\n\nIn any event, if you leave out `ext` and `noext` entirely, autoconf is supposed to figure out which works, and I think use `noext` if possible and `ext` if it has to. That’s probably the one we want.",
      "parentUuid": "23c71e81_5bcade58",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "476bc60d_36d97c24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2022-12-01T18:49:24Z",
      "side": 1,
      "message": "It sounds like you",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb9248a5_b61972c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2022-12-01T19:07:12Z",
      "side": 1,
      "message": "This is a relatively recent install of Cygwin with g++ 11.3.0. It recognizes `-std\u003dc++17` just fine and most files compile. But after pre-processing `\u003cstring.h\u003e` with `-std\u003dc++17`, `strdup()` isn\u0027t defined.\n\nI tried `AX_CXX_COMPILE_STDCXX(17, , mandatory)` and that works for me in Cygwin. In this particular case, there\u0027s no `-std\u003d` at all, probably because `configure`  ran this check: `checking whether g++ supports C++17 features by default... yes`.",
      "parentUuid": "def0f45f_078f5766",
      "revId": "f9bf260e943bd833f7b3092b0652aaefb26fd62d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}