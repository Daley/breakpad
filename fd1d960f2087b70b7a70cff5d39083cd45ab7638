{
  "comments": [
    {
      "key": {
        "uuid": "2923dde4_a4a37b6f",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-05-04T14:32:46Z",
      "side": 1,
      "message": "Do you really want to do this on all non-Android, or do you just want to restrict it to Apple platforms?",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00690e0b_b42b13dd",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1266265
      },
      "writtenOn": "2020-05-04T14:47:46Z",
      "side": 1,
      "message": "In my environment I haven\u0027t seen this used on non-Mac, but can probably add such a restriction.\n\nHowever, can this issue develop on other platforms, too? Or is it limited to Mac?\n\nI would guess that a non-Mac would have a different naming convention, though",
      "parentUuid": "2923dde4_a4a37b6f",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c469cd2_b9a4a40b",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-05-04T14:54:52Z",
      "side": 1,
      "message": "\u003e In my environment I haven\u0027t seen this used on non-Mac, but can probably add such a restriction.\n\nThis code is used on all platforms except Windows.\n\n\u003e However, can this issue develop on other platforms, too? Or is it limited to Mac?\n\u003e \n\u003e I would guess that a non-Mac would have a different naming convention, though\n\nEverything other than Windows is using the same basic name decoration scheme, which originates with the Itanium C++ ABI that everyone follows, more or less.\n\nThe details on underscores will be different.\n\nAnother difference: macOS gets abi::__cxa_demangle from llvm libc++abi. Other platforms may be getting their demangler from somewhere else, like GCC libstdc++. Other demanglers might not be as noisy when they encounter something they don’t like.\n\nI recommend investigating this, either through the collection of empirical data, or through source code inspection, or both.",
      "parentUuid": "00690e0b_b42b13dd",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75d5609_e28a29bb",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-05-04T14:32:46Z",
      "side": 1,
      "message": "This new block deserves a brief comment.",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7d9ce29_9f492f65",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-05-04T15:03:01Z",
      "side": 1,
      "message": "or maybe being moved into a LooksLikeMangledName helper function",
      "parentUuid": "b75d5609_e28a29bb",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9614958_c1dc961d",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-05-04T14:32:46Z",
      "side": 1,
      "message": "You need to be careful not to dereference beyond a NUL byte.",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9c13a71_d7a07d07",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1266265
      },
      "writtenOn": "2020-05-04T14:47:46Z",
      "side": 1,
      "message": "Assuming mangled is a null terminated string (is that a correct assumption about the std::string class?), then the NUL byte will make the loop break, and the next condition will mark it as Don\u0027t Mangle",
      "parentUuid": "c9614958_c1dc961d",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e75d8def_3637cd41",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-05-04T14:32:46Z",
      "side": 1,
      "message": "I’d prefer {} to ; for an empty loop body, as it’s less fragile.",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8880e460_381b8927",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1266265
      },
      "writtenOn": "2020-05-04T14:47:46Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "e75d8def_3637cd41",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbe65c77_a22ad832",
        "filename": "src/common/language.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-05-04T15:03:01Z",
      "side": 1,
      "message": "or:\n\n  int i \u003d strspn(mangled, \"_\");\n  if (i \u003d\u003d 0 || i \u003e 4 || mangled[i] !\u003d \u0027Z\u0027) {\n    demangled-\u003eclear();\n    return kDontDemangle;\n  }",
      "parentUuid": "8880e460_381b8927",
      "revId": "fd1d960f2087b70b7a70cff5d39083cd45ab7638",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}