{
  "comments": [
    {
      "key": {
        "uuid": "ea8fe451_5f15a670",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1452246
      },
      "writtenOn": "2020-09-05T23:22:07Z",
      "side": 1,
      "message": "Hi fellow developers, \n\nCould someone please take out a minute to review the change.\n\nKind Regards\nTej Partap Singh",
      "revId": "54b3c0040f63464a41f24113dda23ac3af92e247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da372bc_a6ac82a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2020-09-06T03:16:19Z",
      "side": 1,
      "message": "couple of things\n\n* please revert all of your whitespace/style changes.  they\u0027re incorrect, and we don\u0027t want to mix functional \u0026 style changes in one CL.\n* breakpad doesn\u0027t use exceptions.  trying to have code throw/raise them won\u0027t work.\n* set_dump_path shouldn\u0027t throw an exception itself.\n\nso i\u0027m not sure how this fix works.",
      "revId": "54b3c0040f63464a41f24113dda23ac3af92e247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfadb260_b078eacf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1452246
      },
      "writtenOn": "2020-09-06T07:23:41Z",
      "side": 1,
      "message": "Hi Mike,\n\nThanks for taking time out to review the change. On the white spaces I will study what styling paradigm is followed, apologies on that front.\n\nJust to set the context of the proposed change.\nWe have been using breakpad in our tool for the past 4 years now \u0026 find it very productive. At the very least for this scenario we wanted to avoid the crash by throwing an exception from the relevant code section. Of course this way exception handler watcher will not do it\u0027s job. I was able to test this in our tool \u0026 this cheap fix works for us. With this at least our tool didn\u0027t crash.\n\nThe issue here lies in that fact that sum of length of dump_path provided by user \u0026 string generated by breakpad internals exceeds 255 (maximum value of path length on windows).\n\nIn the method ExceptionHandler::UpdateNextId I could deduce the following.\n\n- dump_path_c_ is the dump path directory user provided\n- next_minidump_id_c_ is some random number generated.\n- Call to swprintf generates the absolute path of minidump file. This is where the crash happens.\n\nIf you are saying breakpad code does not throws exceptions, what I can suggest is that exception handler class provides a public method\nPrototype :\n- bool canInitialize(const std::string\u0026 dump_path) const;\n\nThis can return a bool status indicating whether breakpad can initialize itself or not. IMO throwing exception makes more sense for this use case here.\n\nAny more suggestions from your side to avoid the crash are appreciated. \n\nKind Regards,\nTej Partap Singh",
      "revId": "54b3c0040f63464a41f24113dda23ac3af92e247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "804609cb_e59bf2f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2020-09-06T15:40:20Z",
      "side": 1,
      "message": "\u003e Call to swprintf generates the absolute path of minidump file. This is where the crash happens.\n\nmy point is twofold:\n* a crash doesn\u0027t throw an exception, so i don\u0027t see how this change wrapping it in a try{} block helps with your case.\n* the swprintf call to a fixed size buffer specifically includes the limit in that call so as to not overflow it.  so how is it crashing ?  is the swprintf implementation buggy ?\n\nthe path will certainly be truncated when you pass it one that is too long, and we could add a static method for people to check against.  i would call it something boring like \"isValidDumpPath\" or something.\n\nwrt exceptions, we do not use them anywhere.  we\u0027re not going to start.  people are building \u0026 using breakpad in environments where exceptions are not used or allowed, so we can\u0027t break them.",
      "revId": "54b3c0040f63464a41f24113dda23ac3af92e247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7682afb9_f4d1e2aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1452246
      },
      "writtenOn": "2020-09-06T20:51:06Z",
      "side": 1,
      "message": "Hi Mike, \n\nThanks for the prompt response. Let me try to answer your queries.\n\n1. a crash doesn\u0027t throw an exception, so i don\u0027t see how this change wrapping it in a try{} block helps with your case.\n \u003e\u003e Wrapping in try block is an attempt to avoid crash triggered in swprintf called from ExceptionHandler::UpdateNextId().\n\n2. the swprintf call to a fixed size buffer specifically includes the limit in that call so as to not overflow it.  so how is it crashing ?  is the swprintf implementation buggy ?\n\n\u003e\u003e Yes swprintf implementation seems buggy with my use case as I can see in the stack trace in Visual Studio. The stack is triggered from swprintf with my usecase. I\u0027ll get back to you with a proper reproducer if that\u0027s what you require. Post that \"isValidDumpPath\" public member function would be nice to have for client code. This way we can avoid this abnormal exit/crash in ExceptionHandler class without having to throw exceptions from breakpad\u0027s code.\n\nThanks a lot for all your comments. Really appreciate your time devoted to this problem.\n\nKind Regards\nTej Partap Singh\n\n\n",
      "revId": "54b3c0040f63464a41f24113dda23ac3af92e247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}