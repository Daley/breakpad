{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bc6f7555_9d88d64b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1171009
      },
      "writtenOn": "2022-10-17T19:31:22Z",
      "side": 1,
      "message": "Noticed this in rolling ChromeOS copy where this commit is causing a build failure.\n\nhttps://logs.chromium.org/logs/chromeos/buildbucket/cr-buildbucket/8800268935726267681/+/u/run_SDK_package_unit_tests/call_chromite.api.TestService_BuildTargetUnitTest/call_response:_google-breakpad/chromeos-base_google-breakpad_log",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfb84d35_caa325c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1178827
      },
      "writtenOn": "2022-10-18T09:26:08Z",
      "side": 1,
      "message": "Thanks for catching this Manoj, and thanks for the fix Christopher. Looks like both the gyp and automake builds on my workstation used gcc, so I didn\u0027t get a warning for this.",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4dbb717_c3f9060a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1178827
      },
      "writtenOn": "2022-10-18T09:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc6f7555_9d88d64b",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60644018_b0618ab0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2022-11-11T01:55:30Z",
      "side": 1,
      "message": "BTW, this CL still has several outstanding unresolved comments. Are those going to get addressed?",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92831b46_5cf4ea9a",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-10-19T19:20:31Z",
      "side": 1,
      "message": "this logic belongs in the build files.  i.e. you shouldn\u0027t be compiling this for non-Linux hosts.",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1be0b9d_3eba3b55",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-10-19T19:20:31Z",
      "side": 1,
      "message": "this duplicates logic we already have in src/common/linux/tests/auto_testfile.h",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f09bebc7_5e0f477f",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-10-19T19:20:31Z",
      "side": 1,
      "message": "```\n*** CID 282514:  Uninitialized members  (UNINIT_CTOR)\n/src/src/processor/disassembler_objdump.cc: 78 in google_breakpad::\u003cunnamed\u003e::ScopedTmpFile::ScopedTmpFile(const char *)()\n72     \n73      private:\n74       int fd_;\n75       string path_;\n76     };\n77     \n\u003e\u003e\u003e     CID 282514:  Uninitialized members  (UNINIT_CTOR)\n\u003e\u003e\u003e     Non-static class member \"fd_\" is not initialized in this constructor nor in any functions that it calls.\n78     ScopedTmpFile::ScopedTmpFile(const char* path_format) : path_(path_format) {}\n79     \n80     ScopedTmpFile::~ScopedTmpFile() {\n81       if (fd_) {\n82         close(fd_);\n83         unlink(path_.c_str());\n```",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "817ec106_ecfaaec4",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 295,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-10-19T19:20:31Z",
      "side": 1,
      "message": "```\n*** CID 282517:  Uninitialized variables  (UNINIT)\n/src/src/processor/disassembler_objdump.cc: 295 in google_breakpad::DisassemblerObjdump::DisassembleInstruction(unsigned int, const unsigned char *, unsigned int, std::__cxx11::basic_string\u003cchar, std::char_traits\u003cchar\u003e, std::allocator\u003cchar\u003e\u003e \u0026)()\n289       // objdump, and one for the output, and write the bytes to the input file.\n290       ScopedTmpFile raw_bytes_file(\"/tmp/breakpad_mem_region-raw_bytes-XXXXXX\");\n291       ScopedTmpFile disassembly_file(\"/tmp/breakpad_mem_region-disassembly-XXXXXX\");\n292       if (!raw_bytes_file.Create() || !disassembly_file.Create() ||\n293           !raw_bytes_file.Write(raw_bytes, raw_bytes_len)) {\n294         BPLOG(ERROR) \u003c\u003c \"Failed creating temporary files.\";\n\u003e\u003e\u003e     CID 282517:  Uninitialized variables  (UNINIT)\n\u003e\u003e\u003e     Using uninitialized value \"disassembly_file.fd_\" when calling \"~ScopedTmpFile\".\n295         return false;\n296       }\n297     \n298       char cmd[1024] \u003d {0};\n299       snprintf(cmd, 1024,\n300                \"objdump -D --no-show-raw-insn -b binary -M intel -m %s %s \u003e %s\",\n```",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed537023_ee787e23",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 303,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-10-19T19:20:31Z",
      "side": 1,
      "message": "you really should never use `system()`.  seems like you should fork, dup2 the fd of the tmpfiles to stdout, and then exec the objdump program.  then you don\u0027t need to fork a shell just to do the dup2 for you.",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "130a41e7_9f67b9f1",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 510,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2022-11-11T01:41:45Z",
      "side": 1,
      "message": "This doesn\u0027t compile. It should be a reference and not a pointer. I think this is an easy fix, so why don\u0027t we do that.",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee67efc7_c6ad6be1",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 510,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2022-11-11T01:55:30Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/4021971",
      "parentUuid": "130a41e7_9f67b9f1",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5082d39c_6a0e05ab",
        "filename": "src/processor/disassembler_objdump.cc",
        "patchSetId": 9
      },
      "lineNbr": 510,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2022-11-22T05:49:58Z",
      "side": 1,
      "message": "let\u0027s just revert if the bugs aren\u0027t being addressed",
      "parentUuid": "ee67efc7_c6ad6be1",
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f84a2d58_90ff087a",
        "filename": "src/processor/disassembler_objdump_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 150,
      "author": {
        "id": 1171009
      },
      "writtenOn": "2022-10-17T19:31:22Z",
      "side": 1,
      "message": "the last arg should be sizeof(*raw_context), since raw_context is a pointer.",
      "range": {
        "startLine": 150,
        "startChar": 26,
        "endLine": 150,
        "endChar": 46
      },
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff3e2db9_497b17de",
        "filename": "src/processor/disassembler_objdump_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 150,
      "author": {
        "id": 1178827
      },
      "writtenOn": "2022-10-18T09:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f84a2d58_90ff087a",
      "range": {
        "startLine": 150,
        "startChar": 26,
        "endLine": 150,
        "endChar": 46
      },
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7e758a1_2cabed52",
        "filename": "src/processor/disassembler_objdump_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 173,
      "author": {
        "id": 1171009
      },
      "writtenOn": "2022-10-17T19:31:22Z",
      "side": 1,
      "message": "the last arg should be sizeof(*raw_context), since raw_context is a pointer.",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 48
      },
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "142f9e48_790d64bb",
        "filename": "src/processor/disassembler_objdump_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 173,
      "author": {
        "id": 1178827
      },
      "writtenOn": "2022-10-18T09:26:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7e758a1_2cabed52",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 173,
        "endChar": 48
      },
      "revId": "6289830b67c6765ec9bf1a2d1b8d249b6b845411",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}