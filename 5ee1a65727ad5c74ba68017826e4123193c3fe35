{
  "comments": [
    {
      "key": {
        "uuid": "63d5fdb0_2a545b02",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2333,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2019-11-28T00:52:47Z",
      "side": 1,
      "message": "The address_size isn’t actually used anywhere, which means that someone else’s address_size must be getting borrowed for the CFI’s purposes. That’s not entirely correct, but assuming everyone’s behaving well, they’re not likely to be out of sync.\n\nCautious “OK” on this one if it’s too tricky to fix correctly, mostly because this code’s days are hopefully numbered.",
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cf4ef71_ea47f56d",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2333,
      "author": {
        "id": 1324403
      },
      "writtenOn": "2019-12-03T21:26:59Z",
      "side": 1,
      "message": "Yeah I noticed this as well and figured it must just work, otherwise we would have noticed. What seems correct to me is if DWARF version \u003e\u003d4 then save these sizes in CIE, otherwise leave old (as in, prior to DWARF4) behavior.\n\nHowever, when I sat down and tried to find somewhere the address_size _would_ be used, I couldn\u0027t find one. Writing out the \"STACK CFI ...\" lines in the Breakpad symbol file doesn\u0027t seem to use it, and the StackFrameEntry-s returned by GetStackFrameEntries() don\u0027t contain the address_size.\n\nSo, it appears to me like CallFrameInfo reads the real CIE into a CIE struct but then AFAICT doesn\u0027t do anything that specifies an address_size anyway, and if anyone else used the GetStackFrameEntries() API, then they already aren\u0027t getting address_size, and the one place I know we do use the StackFrameEntry-s (when we write \"STACK CFI ...\" lines) doesn\u0027t have a notion of address size.\n\nI think it\u0027s likely that I\u0027m missing something in this analysis, so please let me know if there\u0027s a place where we really must be specifying an address_size. I\u0027ve been going in circles trying to find one thus far.",
      "parentUuid": "63d5fdb0_2a545b02",
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b8b0271_c3aacbc5",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2333,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2019-12-03T21:35:54Z",
      "side": 1,
      "message": "\u003e Yeah I noticed this as well and figured it must just work, otherwise we would have noticed. What seems correct to me is if DWARF version \u003e\u003d4 then save these sizes in CIE, otherwise leave old (as in, prior to DWARF4) behavior.\n\u003e \n\u003e However, when I sat down and tried to find somewhere the address_size _would_ be used, I couldn\u0027t find one. Writing out the \"STACK CFI ...\" lines in the Breakpad symbol file doesn\u0027t seem to use it, and the StackFrameEntry-s returned by GetStackFrameEntries() don\u0027t contain the address_size.\n\u003e \n\u003e So, it appears to me like CallFrameInfo reads the real CIE into a CIE struct but then AFAICT doesn\u0027t do anything that specifies an address_size anyway, and if anyone else used the GetStackFrameEntries() API, then they already aren\u0027t getting address_size, and the one place I know we do use the StackFrameEntry-s (when we write \"STACK CFI ...\" lines) doesn\u0027t have a notion of address size.\n\u003e \n\u003e I think it\u0027s likely that I\u0027m missing something in this analysis, so please let me know if there\u0027s a place where we really must be specifying an address_size. I\u0027ve been going in circles trying to find one thus far.\n\nI think ReadEncodedPointer is where it becomes relevant, but maybe we aren’t hitting that anywhere.",
      "parentUuid": "4cf4ef71_ea47f56d",
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11fc3014_9aecab8e",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2333,
      "author": {
        "id": 1324403
      },
      "writtenOn": "2019-12-03T22:17:24Z",
      "side": 1,
      "message": "Ah that makes sense. It looks like from Linux dump_syms, a new ByteReader instance (currently) carries address size into CallFrameInfo for each CFI we attempt to read. That ByteReader is passed into a CallFrameInfo::State that only lives while parent CallFrameInfo is reading. I\u0027m going to try setting the address size in this ByteReader instance in the DWARF4 case. Let me know if that seems wrong.",
      "parentUuid": "7b8b0271_c3aacbc5",
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "523d1004_9a2ba8de",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2333,
      "author": {
        "id": 1324403
      },
      "writtenOn": "2019-12-03T22:52:24Z",
      "side": 1,
      "message": "Actually I\u0027m quite puzzled at why this does what it currently does...\n\nThe unit test for CIEs with 64bit addresses explicitly sets the ByteReader address size to 4. When I changed CallFrameInfo::Start to set the ByteReader address size to the one read from the CIE, the unit test fails (presumably because it\u0027s really 8 and not 4).\n\nAny idea what\u0027s going on?",
      "parentUuid": "11fc3014_9aecab8e",
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ca702bf_6b88f59e",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2333,
      "author": {
        "id": 1324403
      },
      "writtenOn": "2019-12-03T23:02:42Z",
      "side": 1,
      "message": "I fixed the unit tests by changing the CFI bitness to 64, however I\u0027m still totally unsure if this means the old tests were wrong or if this means that my new test is wrong (and hence I\u0027ve likely just introduced a bug into the actual product code-path).",
      "parentUuid": "523d1004_9a2ba8de",
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae9e3aa4_aa56d4a9",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2344,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2019-11-28T00:52:47Z",
      "side": 1,
      "message": "This comment is confused. All modern Unix-like systems use a flat memory model, essentially bypassing the x86’s historic segmentation scheme. (And this model is essentially mandated for x86_64).\n\nBecause this comment doesn’t have any value to me, I’d say “remove it,” but if you considered it valuable, you can keep it.",
      "range": {
        "startLine": 2341,
        "startChar": 0,
        "endLine": 2344,
        "endChar": 11
      },
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f65fecc_8ea5979e",
        "filename": "src/common/dwarf/dwarf2reader.cc",
        "patchSetId": 1
      },
      "lineNbr": 2344,
      "author": {
        "id": 1324403
      },
      "writtenOn": "2019-12-03T21:26:59Z",
      "side": 1,
      "message": "I don\u0027t really find it useful, I just didn\u0027t remove it because as far as I could tell the truth/utility of it wasn\u0027t contingent on any thing I changed here. Your argument makes sense to me though, I\u0027ll remove it.",
      "parentUuid": "ae9e3aa4_aa56d4a9",
      "range": {
        "startLine": 2341,
        "startChar": 0,
        "endLine": 2344,
        "endChar": 11
      },
      "revId": "5ee1a65727ad5c74ba68017826e4123193c3fe35",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}