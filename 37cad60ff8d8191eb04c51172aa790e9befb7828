{
  "comments": [
    {
      "key": {
        "uuid": "8511bb9a_c70ae964",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-01-17T15:20:04Z",
      "side": 1,
      "message": "Verified CLA OK.",
      "revId": "37cad60ff8d8191eb04c51172aa790e9befb7828",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff2c1839_70f8e15a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-01-17T15:20:04Z",
      "side": 1,
      "message": "Hi, Greg!",
      "revId": "37cad60ff8d8191eb04c51172aa790e9befb7828",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58d4a05d_f6bc8a27",
        "filename": "src/common/dwarf_line_to_module.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-01-17T15:20:04Z",
      "side": 1,
      "message": "This is a weird comment. The condition above doesn’t contemplate overlap at all, it requires that the successive line table entry’s range begin exactly where the previous one’s ended.\n\nThe code that follows is correct for handling the overlap, but it’s pointless unless the condition is fixed to also recognize it.",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 146,
        "endChar": 32
      },
      "revId": "37cad60ff8d8191eb04c51172aa790e9befb7828",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0ffefc5_59e00853",
        "filename": "src/common/dwarf_line_to_module.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1392265
      },
      "writtenOn": "2020-01-17T21:19:28Z",
      "side": 1,
      "message": "Good catch! The previous code looks like:\n```\n(prev.address + prev.size) \u003e\u003d address\n```\n\nGreg told me there\u0027s some problem if we either have bad DWARF somewhere or incorrectly converted DWARF. He switch to using:\n```\n(prev.address + prev.size) \u003d\u003d address\n```\n\nI will remove this comment.",
      "parentUuid": "58d4a05d_f6bc8a27",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 146,
        "endChar": 32
      },
      "revId": "37cad60ff8d8191eb04c51172aa790e9befb7828",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f3bb62a_195b99ad",
        "filename": "src/common/dwarf_line_to_module.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-01-17T21:27:00Z",
      "side": 1,
      "message": "\u003e Good catch! The previous code looks like:\n\u003e ```\n\u003e (prev.address + prev.size) \u003e\u003d address\n\u003e ```\n\u003e \n\u003e Greg told me there\u0027s some problem if we either have bad DWARF somewhere or incorrectly converted DWARF. He switch to using:\n\u003e ```\n\u003e (prev.address + prev.size) \u003d\u003d address\n\u003e ```\n\u003e \n\u003e I will remove this comment.\n\nDon’t just remove the comment, then. Remove the overlap handling below too.",
      "parentUuid": "d0ffefc5_59e00853",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 146,
        "endChar": 32
      },
      "revId": "37cad60ff8d8191eb04c51172aa790e9befb7828",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}