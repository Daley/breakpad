{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "12e63c81_e081212f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2023-04-26T18:46:13Z",
      "side": 1,
      "message": "-\u003e mark@ PTAL :)",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4279efd6_e0b7f22d",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "1. For a C header, use `\u003climits.h\u003e` instead of `\u003cclimits\u003e`.\n\n2. For things where a better C++ equivalent exists, use that instead. Can you use `\u003cnumeric_limits\u003e`?",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b88496c_55822d8d",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2023-04-26T19:09:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4279efd6_e0b7f22d",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac412991_00818da5",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "`serialized_data \u0026\u0026 size`",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdeded6f_912d584d",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2023-04-26T19:09:34Z",
      "side": 1,
      "message": "SerializeWithSizeT writes 0 if serialized_data returns nullptr, so this is currently preserving the existing behavior. Would you like *size to remain untouched and potentially garbage rather than always initializing *size in this call?",
      "parentUuid": "ac412991_00818da5",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68318b16_81861dd3",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:27:30Z",
      "side": 1,
      "message": "\u003e SerializeWithSizeT writes 0 if serialized_data returns nullptr, so this is currently preserving the existing behavior. Would you like *size to remain untouched and potentially garbage rather than always initializing *size in this call?\n\n(see next comment)",
      "parentUuid": "cdeded6f_912d584d",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd5fffe_f5165d51",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "…and `std::numeric_limits\u003cunsigned int\u003e::max()`.",
      "range": {
        "startLine": 121,
        "startChar": 29,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92990896_0faa140d",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2023-04-26T19:09:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4dd5fffe_f5165d51",
      "range": {
        "startLine": 121,
        "startChar": 29,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ab2382_982f4b1d",
        "filename": "src/processor/module_serializer.cc",
        "patchSetId": 2
      },
      "lineNbr": 225,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "`serialized_data \u0026\u0026 size`",
      "range": {
        "startLine": 225,
        "startChar": 6,
        "endLine": 225,
        "endChar": 10
      },
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2534f01b_627b57bb",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "Why can’t you get rid of the `int*` form of Serialize right now?",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2da6679_9a9745bf",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2023-04-26T19:09:34Z",
      "side": 1,
      "message": "Would you prefer me doing this and having a breaking import into google3 and roll + update call sites in the same CL?",
      "parentUuid": "2534f01b_627b57bb",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f972c9c_2d61dfd8",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:27:30Z",
      "side": 1,
      "message": "\u003e Would you prefer me doing this and having a breaking import into google3 and roll + update call sites in the same CL?\n\nIf you update call sites, it’s not breaking.\n\nIf there aren’t so many call sites and you can do it all at once, yes, I prefer that.",
      "parentUuid": "d2da6679_9a9745bf",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aee2f814_7cb5d024",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "Since the desired end state is to get rid of the non-`size_t*` version, wouldn’t you want this version to be named Serialize?\n\nI think we’ve softened a bit on overloading.",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da6ab469_d8dd2684",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2023-04-26T19:09:34Z",
      "side": 1,
      "message": "Can\u0027t because it\u0027ll break 32-bit compile (where size_t \u003d\u003d unsigned int), right? This sure breaks if I have unsigned long and size_t at least.",
      "parentUuid": "aee2f814_7cb5d024",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a855822b_9ba147d0",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:27:30Z",
      "side": 1,
      "message": "\u003e Can\u0027t because it\u0027ll break 32-bit compile (where size_t \u003d\u003d unsigned int), right? This sure breaks if I have unsigned long and size_t at least.\n\nUnder 32-bit platforms we’re likely to encounter, `size_t` may be either `unsigned int` or `unsigned long`. You could `std::enable_if` your way around it.\n\nBut if you’re going to move everything to `size_t*` all at once, this becomes moot.",
      "parentUuid": "da6ab469_d8dd2684",
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "593ba92f_11119168",
        "filename": "src/processor/module_serializer.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2023-04-26T19:00:01Z",
      "side": 1,
      "message": "Same comments apply here.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 92,
        "endChar": 67
      },
      "revId": "357f60a2d9a633d175a18f6194a045fa1f41b6f5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}