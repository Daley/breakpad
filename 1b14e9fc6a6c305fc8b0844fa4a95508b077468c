{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf6d6696_daa4c99d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-07-06T14:23:51Z",
      "side": 1,
      "message": "there appears to be a relationship between this func, MAX_OP_STRING, and MAX_INSN_STRING.  i.e. increasing the value here doesn\u0027t seem quite right.\n\nbigger picture, seems like we should drop libdisasm entirely.  it only supports x86 (32-bit), and we already rely on other APIs for x86_64 (64-bit).",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c1c6f19_6136df55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-07-06T15:00:16Z",
      "side": 1,
      "message": "I think I see what you mean. Increasing the size of _tmp will shut the compiler up about the truncation in snprintf() but we are still silently truncating in STRNCAT().",
      "parentUuid": "cf6d6696_daa4c99d",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d581d6e_67e20a29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-07-07T09:28:34Z",
      "side": 1,
      "message": "Actually, we have a few millions IA-32 devices in the field running breakpad.\nI\u0027ll take a closer look for a proper patch next week.",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215979bb_2c0ce5de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-07-11T15:03:21Z",
      "side": 1,
      "message": "I\u0027m confused (again)...\n\nbreakpad provides src/processor/disassembler_x86.cc (which appears to be a wrapper around libdisasm), **but** also provides src/processor/stackwalker_x86.cc which appears to be the code actually used for x86 in minidump_stackwalk?",
      "parentUuid": "3d581d6e_67e20a29",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5259a975_e8936bc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-07-11T15:40:57Z",
      "side": 1,
      "message": "As far as I can tell...\nsrc/processor/exploitability_win.cc expects libdisasm\n(grep DisassemblerX86)\n\nExploitabilityWin object is instantiated for Windows minidumps.\nExploitability::ExploitabilityForPlatform\nsrc/processor/exploitability.cc\n\nHow do you wish to proceed?\n\nFWIW, I\u0027ve never noticed any output from the Linux exploitability module. How or when is it supposed to trigger?",
      "parentUuid": "215979bb_2c0ce5de",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdad0e9b_db273838",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-07-11T17:56:22Z",
      "side": 1,
      "message": "the disassembler, afaik, only supports 32-bit x86.  it\u0027s why we have a hacky disassembler code path that uses objdump.  which means it would only work if you had binutils installed on the system :(.\n\nhence my suggestion we should scuttle this library entirely, and look at something modern.  binutils provides disassembly libraries, and i imagine llvm does.  zydis looks pretty popular on GH, but it\u0027s x86-only, and we do a lot more arm stuff nowadays.  maybe keystone then ?",
      "parentUuid": "5259a975_e8936bc8",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00e1fec7_11c1b6e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1587084
      },
      "writtenOn": "2023-07-13T11:39:03Z",
      "side": 1,
      "message": "Roger that. But in the mean time, can we fix the warnings?\nThey\u0027re triggering my OCD :)\n\nWe can add a warning in the code when an actual truncation is detected?\nOr we can add a configure.ac variable to disable the Windows analyzer.\n(Not sure why there are different code paths for the Windows and Linux analyzer.)",
      "parentUuid": "cdad0e9b_db273838",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e7f1e9_fd881e17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000768
      },
      "writtenOn": "2023-07-17T16:40:19Z",
      "side": 1,
      "message": "i haven\u0027t traced this code to see how these buffers are ultimately used.  i\u0027m not against increasing the buffer sizes, but doing it in this one func doesn\u0027t seem correct.\n\ncan you see if `MAX_OP_STRING` itself can safely be increased, as well as other defines that are related to it ?",
      "parentUuid": "00e1fec7_11c1b6e2",
      "revId": "1b14e9fc6a6c305fc8b0844fa4a95508b077468c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}