{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0c90f136_b5d5695c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2024-07-12T10:36:54Z",
      "side": 1,
      "message": "@ivanpe@chromium.org: ptal these improvements i made while fixing the 2GB issue. i\u0027ve verified that the output is byte-for-byte identical.",
      "revId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02cfe600_7ee28523",
        "filename": "src/common/windows/pdb_source_line_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 493,
      "author": {
        "id": 1159306
      },
      "writtenOn": "2024-07-10T17:55:46Z",
      "side": 1,
      "message": "Drive-by thought: maintain 2 parallel structs, a `vector\u003cCComBSTR\u003e` (id is implicitly the index into the vector) and `map\u003cstd::wstring_view, int\u003e` (mapping name to ID). Then this becomes something like:\n\n```\ninline_origin_vector_.push_back(CComBSTR());\nCComBSTR\u0026 name_bstr \u003d inline_origin_vector_.back();\ncallsite-\u003eget_name(\u0026name_bstr);\ninline_origin_map_[wstring_view(name_bstr, name_bstr.Length())] \u003d inline_origin_vector_.size();\n```\n\nThat way you get map lookups with no string copies or custom comparators, and can use `inline_origin_vector_` directly in PrintInlineOrigins. The big difference is it needs to be resized progressively instead of built in one shot in PrintInlineOrigins.\n\n...oh, wait, if the vector gets resized the string_views become invalid. `vector\u003cunique_ptr\u003cCComBSTR\u003e\u003e`? `deque\u003cCComBSTR\u003e`?",
      "revId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3040a21b_7b640f90",
        "filename": "src/common/windows/pdb_source_line_writer.cc",
        "patchSetId": 2
      },
      "lineNbr": 493,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2024-07-12T10:36:54Z",
      "side": 1,
      "message": "vector resize wouldn\u0027t change the locations of the actual string data, provided that the bstrs were guaranteed to be moved rather than copied. this seems a bit fragile and more complex that what\u0027s here now. i don\u0027t think it would be a significant performance gain, so i\u0027m not sure the tradeoff is worth it.\n\ni don\u0027t plan to spend any more time tilting at this windmill. don\u0027t let that stop you from experimenting with it if you wish. :-)",
      "parentUuid": "02cfe600_7ee28523",
      "revId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5696174b418da9480156aa0cefc2f88f2d3fa4da",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}